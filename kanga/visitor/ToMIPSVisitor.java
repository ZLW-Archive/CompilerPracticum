//
// Generated by JTB 1.3.2
//

package kanga.visitor;
import kanga.syntaxtree.*;
import java.util.*;
import kanga.param.*;

import javax.rmi.ssl.SslRMIClientSocketFactory;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ToMIPSVisitor extends GJDepthFirst<MIPSReturn, MIPSLabel> {

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( Procedure() )*
     * f13 -> <EOF>
     */
    public MIPSReturn visit(Goal n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        argu = new MIPSLabel();
        argu.ifprint = false;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        int x = Integer.valueOf(n.f2.f0.toString());  //not used
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        int y = Integer.valueOf(n.f5.f0.toString());
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        int z = Integer.valueOf(n.f8.f0.toString()); //not used
        n.f9.accept(this, argu);
        System.out.print(".text\n" +
                ".globl main\n" +
                "main:\n");
        System.out.print("\tmove $fp, $sp\n");
        System.out.printf("\tsubu $sp, $sp, %d\n", (y+3)*4);
        System.out.print("\tsw $ra, -4($fp)\n");
        n.f10.accept(this, argu);

        System.out.print("\tlw $ra, -4($fp)\n");
        System.out.printf("\taddu $sp, $sp, %d\n", (y+3)*4);
        System.out.print("\tj $ra\n");
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);

        System.out.print(".text\n" +
                ".globl _halloc\n" +
                "_halloc:\n" +
                "\tli $v0, 9\n" +
                "\tsyscall\n" +
                "\tj $ra\n" +
                ".text\n" +
                ".globl _print\n" +
                "_print:\n" +
                "\tli $v0, 1\n" +
                "\tsyscall\n" +
                "\tla $a0, newl\n" +
                "\tli $v0, 4\n" +
                "\tsyscall\n" +
                "\tj $ra\n" +
                ".data\n" +
                ".align   0\n" +
                "newl:    .asciiz \"\\n\"\n" +
                ".data\n" +
                ".align   0\n" +
                "str_er:  .asciiz \" ERROR: abnormal termination\\n\"\n");
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public MIPSReturn visit(StmtList n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        argu = new MIPSLabel();
        argu.ifprint = true;
        n.f0.accept(this, argu);
        argu.ifprint = false;
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     */
    public MIPSReturn visit(Procedure n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        System.out.print(".text\n");
        System.out.printf(".globl %s\n", n.f0.f0.tokenImage);
        System.out.printf("%s:\n", n.f0.f0.tokenImage);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        int x = Integer.valueOf(n.f2.f0.toString()); //not used
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        int y = Integer.valueOf(n.f5.f0.toString());
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        int z = Integer.valueOf(n.f8.f0.toString()); //not used
        n.f9.accept(this, argu);
        System.out.print("\tsw $fp, -8($sp)\n");
        System.out.print("\tmove $fp, $sp\n");
        System.out.printf("\tsubu $sp, $sp, %d\n", (y+3)*4);
        System.out.print("\tsw $ra, -4($fp)\n");
        n.f10.accept(this, argu);
        System.out.print("\tlw $ra, -4($fp)\n");
        System.out.printf("\tlw $fp, -8($fp)\n");
        System.out.printf("\taddu $sp, $sp, %d\n", (y+3)*4);
        System.out.printf("\t j $ra\n");
        n.f11.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     *       | ALoadStmt()
     *       | AStoreStmt()
     *       | PassArgStmt()
     *       | CallStmt()
     */
    public MIPSReturn visit(Stmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        argu.ifprint = false;
        n.f0.accept(this, argu);
        argu.ifprint = true;
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public MIPSReturn visit(NoOpStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        System.out.print("\tnop\n");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public MIPSReturn visit(ErrorStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        System.out.print("\tli $v0, 10\n");
        System.out.print("\tsyscall\n");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    public MIPSReturn visit(CJumpStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        System.out.printf("\tbeqz %s %s\n", p.reg, n.f2.f0.toString());
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public MIPSReturn visit(JumpStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        System.out.printf("\tj %s\n", n.f1.f0.tokenImage);
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    public MIPSReturn visit(HStoreStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p0 = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        MIPSReturn p1 = n.f3.accept(this, argu);
        System.out.printf("\tsw %s, %s(%s)\n", p1.reg, n.f2.f0.tokenImage, p0.reg);
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    public MIPSReturn visit(HLoadStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p0 = n.f1.accept(this, argu);
        MIPSReturn p1 = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        System.out.printf("\tlw %s, %s(%s)\n", p0.reg, n.f3.f0.tokenImage, p1.reg);
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    public MIPSReturn visit(MoveStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p0 = n.f1.accept(this, argu);
        MIPSReturn p = n.f2.accept(this, argu);
        if (p.ifreg)
            System.out.printf("\tmove %s, %s\n", p0.reg, p.reg);
        else if(p.ifint)
            System.out.printf("\tli %s, %s\n", p0.reg, p.reg);
        else
            System.out.printf("\tla %s, %s\n", p0.reg, p.reg);
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public MIPSReturn visit(PrintStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        //System.out.print("\tsw $a0 -12($fp)\n");
        System.out.printf("\tmove $a0, %s\n", p.reg);
        System.out.print("\tjal _print\n");
        //System.out.print("\tlw $a0 -12($fp)\n");
        return _ret;
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    public MIPSReturn visit(ALoadStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p0 = n.f1.accept(this, argu);
        MIPSReturn p = n.f2.accept(this, argu);
        System.out.printf("\tlw, %s %d($fp)\n", p0.reg, -12-4*Integer.valueOf(p.reg));
        return _ret;
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    public MIPSReturn visit(AStoreStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        MIPSReturn p0 = n.f2.accept(this, argu);
        System.out.printf("\tsw %s, %d($fp)\n", p0.reg,-12-4*Integer.valueOf(p.reg));
        return _ret;
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */
    public MIPSReturn visit(PassArgStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        MIPSReturn p = n.f2.accept(this, argu);
        System.out.printf("\tsw %s, %d($sp)\n", p.reg, -8-4*Integer.valueOf(n.f1.f0.tokenImage));
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    public MIPSReturn visit(CallStmt n, MIPSLabel argu) {
        MIPSReturn _ret=null;
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        if (p.ifreg)
            System.out.printf("\tjalr %s\n", p.reg);
        else
            System.out.printf("\tjal %s\n", p.reg);
        return _ret;
    }

    /**
     * f0 -> HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public MIPSReturn visit(Exp n, MIPSLabel argu) {
        MIPSReturn p = n.f0.accept(this, argu);
        //System.out.println("EXP: "+p.reg);
        return p;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public MIPSReturn visit(HAllocate n, MIPSLabel argu) {
        MIPSReturn _ret = new MIPSReturn();
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        if (p.ifreg)
        {
            //System.out.print("\tsw $a0 -12($fp)\n");
            System.out.printf("\tmove $a0, %s\n", p.reg);
            System.out.print("\tjal _halloc\n");
            //System.out.print("\tlw $a0 -12($fp)\n");
        }
        else
        {
            System.out.printf("\tli $a0, %s\n", p.reg);
            System.out.print("\tjal _halloc\n");
        }
        _ret.ifreg = true;
        _ret.reg = "$v0";
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    public MIPSReturn visit(BinOp n, MIPSLabel argu) {
        MIPSReturn _ret=new MIPSReturn();
        MIPSReturn p = n.f0.accept(this, argu);
        MIPSReturn p2 = n.f1.accept(this, argu);
        MIPSReturn p1 = n.f2.accept(this, argu);
        System.out.printf("\t%s $a0 %s %s\n", p.reg, p2.reg, p1.reg);
        _ret.reg = "$a0";
        _ret.ifreg = true;
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public MIPSReturn visit(Operator n, MIPSLabel argu) {
        MIPSReturn _ret=new MIPSReturn();
        n.f0.accept(this, argu);
        _ret.ifreg = false;
        if (n.f0.choice.toString().equals("LT"))
            _ret.reg = "slt";
        else if (n.f0.choice.toString().equals("PLUS"))
            _ret.reg = "add";
        else if (n.f0.choice.toString().equals("MINUS"))
            _ret.reg = "sub";
        else
            _ret.reg = "mul";
        return _ret;
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    public MIPSReturn visit(SpilledArg n, MIPSLabel argu) {
        n.f0.accept(this, argu);
        MIPSReturn p = n.f1.accept(this, argu);
        return p;
    }

    /**
     * f0 -> Reg()
     *       | IntegerLiteral()
     *       | Label()
     */
    public MIPSReturn visit(SimpleExp n, MIPSLabel argu) {
        MIPSReturn p = n.f0.accept(this, argu);
        return p;
    }

    /**
     * f0 -> "a0"
     *       | "a1"
     *       | "a2"
     *       | "a3"
     *       | "t0"
     *       | "t1"
     *       | "t2"
     *       | "t3"
     *       | "t4"
     *       | "t5"
     *       | "t6"
     *       | "t7"
     *       | "s0"
     *       | "s1"
     *       | "s2"
     *       | "s3"
     *       | "s4"
     *       | "s5"
     *       | "s6"
     *       | "s7"
     *       | "t8"
     *       | "t9"
     *       | "v0"
     *       | "v1"
     */
    public MIPSReturn visit(Reg n, MIPSLabel argu) {
        MIPSReturn _ret=new MIPSReturn();
        n.f0.accept(this, argu);
        _ret.ifreg = true;
        _ret.reg = "$"+n.f0.choice.toString();
        //System.out.println("REG:  "+_ret.reg);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public MIPSReturn visit(IntegerLiteral n, MIPSLabel argu) {
        MIPSReturn _ret=new MIPSReturn();
        n.f0.accept(this, argu);
        _ret.ifreg = false;
        _ret.ifint = true;
        _ret.reg = n.f0.tokenImage;
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public MIPSReturn visit(Label n, MIPSLabel argu) {
        MIPSReturn _ret=new MIPSReturn();
        n.f0.accept(this, argu);
        _ret.reg = n.f0.tokenImage;
        _ret.ifreg = false;
        if (argu.ifprint)
            System.out.printf("%s:", _ret.reg);
        return _ret;
    }

}
